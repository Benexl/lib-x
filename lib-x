#!/usr/bin/env bash
#A script written by BeneX-254 in September 4, 2024 under GNU GENERAL PUBLIC LICENSE

CLI_HEADER='
██╗░░░░░██╗██████╗░░░░░░░██╗░░██╗
██║░░░░░██║██╔══██╗░░░░░░╚██╗██╔╝
██║░░░░░██║██████╦╝█████╗░╚███╔╝░
██║░░░░░██║██╔══██╗╚════╝░██╔██╗░
███████╗██║██████╦╝░░░░░░██╔╝╚██╗
╚══════╝╚═╝╚═════╝░░░░░░░╚═╝░░╚═╝
'

CLI_NAME="${0##*/}"
CLI_VERSION="0.1.0"
CLI_AUTHOR="BeneX-254"

CLI_DIR="$(dirname "$(realpath "$0")")"
CLI_CONFIG_DIR="$HOME/.config/$CLI_NAME"
CLI_CONFIG_FILE="$CLI_CONFIG_DIR/${CLI_NAME}.conf"
CLI_DBS_DIR="$CLI_CONFIG_DIR/DBS"

[ -d "$CLI_DBS_DIR" ] || mkdir -p "$CLI_DBS_DIR"

print_config() {
  echo "\
#
#    ██╗░░░░░██╗██████╗░░░░░░░██╗░░██╗  ░█████╗░░█████╗░███╗░░██╗███████╗██╗░██████╗░
#    ██║░░░░░██║██╔══██╗░░░░░░╚██╗██╔╝  ██╔══██╗██╔══██╗████╗░██║██╔════╝██║██╔════╝░
#    ██║░░░░░██║██████╦╝█████╗░╚███╔╝░  ██║░░╚═╝██║░░██║██╔██╗██║█████╗░░██║██║░░██╗░
#    ██║░░░░░██║██╔══██╗╚════╝░██╔██╗░  ██║░░██╗██║░░██║██║╚████║██╔══╝░░██║██║░░╚██╗
#    ███████╗██║██████╦╝░░░░░░██╔╝╚██╗  ╚█████╔╝╚█████╔╝██║░╚███║██║░░░░░██║╚██████╔╝
#    ╚══════╝╚═╝╚═════╝░░░░░░░╚═╝░░╚═╝  ░╚════╝░░╚════╝░╚═╝░░╚══╝╚═╝░░░░░╚═╝░╚═════╝░
#

# whether to show colors when printing ouput
PRETTY_PRINT: $PRETTY_PRINT

# your preferred editor for editing your config
EDITOR: $PREFERRED_EDITOR

# your preferred selector for the tui [fzf/rofi]
PREFERRED_SELECTOR: $PREFERRED_SELECTOR

# the quality of the video when streaming with a player other than mpv
VIDEO_QUALITY: $VIDEO_QUALITY

# whether to show previews [true/false]
# its cool so enable it
ENABLE_PREVIEW: $ENABLE_PREVIEW

# whether to run mpv as a background process and prevent it from closing even if you terminate the program or terminal session
DISOWN_STREAMING_PROCESS: $DISOWN_STREAMING_PROCESS

# whether to update the recent list kept locally [true/false]
UPDATE_RECENT: $UPDATE_RECENT

# the number of recent videos to keep
NO_OF_RECENT: $NO_OF_RECENT

# the player to use for streaming [mpv/vlc]
PLAYER: $PLAYER

# the browser to use to extract cookies from
# this is used to by yt-dlp to access content that would require login
PREFERRED_BROWSER: ${PREFERRED_BROWSER[1]}

# the number of results to get from yt-dlp
NO_OF_SEARCH_RESULTS: $NO_OF_SEARCH_RESULTS

# the duration notifications stay on the screen
NOTIFICATION_DURATION: $NOTIFICATION_DURATION

# where your downloads will be stored
DOWNLOAD_DIRECTORY: $DOWNLOAD_DIRECTORY
"
}
load_config() {
  READING_LIST_DB="$CLI_DBS_DIR/reading_list"
  PAUSED_LIST_DB="$CLI_DBS_DIR/paused_list"
  PLANING_LIST_DB="$CLI_DBS_DIR/planing_list"
  RE_READING_LIST_DB="$CLI_DBS_DIR/re_reading_list"
  COMPLETED_LIST_DB="$CLI_DBS_DIR/completed_list"
  DROPPED_LIST_DB="$CLI_DBS_DIR/dropped_list"
  DOCS_LIST_DB="$CLI_DBS_DIR/docs_list"
  RECENT_DB="$CLI_DBS_DIR/recent"

  DISOWN_READING_PROCESS="$(grep -s 'DISOWN_READING_PROCESS:' "$CLI_CONFIG_FILE" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$DISOWN_READING_PROCESS" ] && DISOWN_READING_PROCESS="true"

  PREFERRED_EDITOR="$(grep -s 'EDITOR:' "$CLI_CONFIG_FILE" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$PREFERRED_EDITOR" ] && PREFERRED_EDITOR=${EDITOR:-open}

  PREFERRED_SELECTOR="$(grep -s 'PREFERRED_SELECTOR:' "$CLI_CONFIG_FILE" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$PREFERRED_SELECTOR" ] && PREFERRED_SELECTOR="fzf"

  ENABLE_PREVIEW="$(grep -s 'ENABLE_PREVIEW:' "$CLI_CONFIG_FILE" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$ENABLE_PREVIEW" ] && ENABLE_PREVIEW="true"

  UPDATE_RECENT="$(grep -s 'UPDATE_RECENT:' "$CLI_CONFIG_FILE" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$UPDATE_RECENT" ] && UPDATE_RECENT="true"

  NO_OF_RECENT="$(grep -s 'NO-OF-RECENT:' "$CLI_CONFIG_FILE" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$NO_OF_RECENT" ] && NO_OF_RECENT=30

  NO_OF_RANDOM_BOOKS="$(grep -s 'NO_OF_RANDOM_BOOKS:' "$CLI_CONFIG_FILE" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$NO_OF_RANDOM_BOOKS" ] && NO_OF_RANDOM_BOOKS=30

  ROFI_THEME="$(grep -s 'ROFI_THEME:' "$CLI_CONFIG_FILE" | sed 's/^#.*//g;s/^.*: //')"

  ! [ -f "$CLI_CONFIG_FILE" ] && print_config >"$CLI_CONFIG_FILE"
  FZF_DEFAULT_OPTS=${LIBX_FZF_OPTS:-'
    --color=fg:#d0d0d0,fg+:#d0d0d0,bg:#121212,bg+:#262626
    --color=hl:#5f87af,hl+:#5fd7ff,info:#afaf87,marker:#87ff00
    --color=prompt:#d7005f,spinner:#af5fff,pointer:#af5fff,header:#87afaf
    --color=border:#262626,label:#aeaeae,query:#d9d9d9
    --border="rounded" --border-label="" --preview-window="border-rounded" --prompt="> "
    --marker=">" --pointer="◆" --separator="─" --scrollbar="│"
  '}
  export FZF_DEFAULT_OPTS

}

init_pretty_print() {
  if [ "$PRETTY_PRINT" = "true" ]; then
    RED=$(tput setaf 1)
    MAGENTA="\x1b[38;2;215;0;95m"
    CYAN=$(tput setaf 6)
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
  fi
}

core_dep_ch() {
  ! command -v "calibre" >/dev/null 2>&1 && echo calibre is not installed and is a core dep please install it to proceed && exit 1
  ! command -v "jq" >/dev/null 2>&1 && echo jq is not installed and is a core dep please install it to proceed && exit 1
  ! command -v "fzf" >/dev/null 2>&1 && echo fzf is not installed and is a core dep please install it to proceed && exit 1
}
send_notification() {
  echo "$1" >&2 && sleep "$NOTIFICATION_DURATION"
}

fzf_preview() {
  file=$1

  dim=${FZF_PREVIEW_COLUMNS}x${FZF_PREVIEW_LINES}
  if [ "$dim" = x ]; then
    dim=$(stty size </dev/tty | awk "{print \$2 \"x\" \$1}")
  fi
  if ! [ "$IMAGE_RENDERER" = "icat" ] && [ -z "$KITTY_WINDOW_ID" ] && [ "$((FZF_PREVIEW_TOP + FZF_PREVIEW_LINES))" -eq "$(stty size </dev/tty | awk "{print \$1}")" ]; then
    dim=${FZF_PREVIEW_COLUMNS}x$((FZF_PREVIEW_LINES - 1))
  fi

  if [ "$IMAGE_RENDERER" = "icat" ] && [ -z "$GHOSTTY_BIN_DIR" ]; then
    if command -v kitten >/dev/null 2>&1; then
      kitten icat --clear --transfer-mode=memory --unicode-placeholder --stdin=no --place="$dim@0x0" "$file" | sed "\$d" | sed "$(printf "\$s/\$/\033[m/")"
    elif command -v icat >/dev/null 2>&1; then
      icat --clear --transfer-mode=memory --unicode-placeholder --stdin=no --place="$dim@0x0" "$file" | sed "\$d" | sed "$(printf "\$s/\$/\033[m/")"
    else
      kitty icat --clear --transfer-mode=memory --unicode-placeholder --stdin=no --place="$dim@0x0" "$file" | sed "\$d" | sed "$(printf "\$s/\$/\033[m/")"
    fi

  elif [ -n "$GHOSTTY_BIN_DIR" ]; then
    if command -v kitten >/dev/null 2>&1; then
      kitten icat --clear --transfer-mode=memory --unicode-placeholder --stdin=no --place="$dim@0x0" "$file" | sed "\$d" | sed "$(printf "\$s/\$/\033[m/")"
    elif command -v icat >/dev/null 2>&1; then
      icat --clear --transfer-mode=memory --unicode-placeholder --stdin=no --place="$dim@0x0" "$file" | sed "\$d" | sed "$(printf "\$s/\$/\033[m/")"
    else
      chafa -s "$dim" "$file"
    fi
  elif command -v chafa >/dev/null 2>&1; then
    case "$PLATFORM" in
    android) chafa -s "$dim" "$file" ;;
    windows) chafa -f sixel -s "$dim" "$file" ;;
    *) chafa -s "$dim" "$file" ;;
    esac
    echo

  elif command -v imgcat >/dev/null; then
    imgcat -W "${dim%%x*}" -H "${dim##*x}" "$file"

  else
    echo please install a terminal image viewer
    echo either icat for kitty terminal and wezterm or imgcat or chafa
  fi
}

update_script() {
  lib_x_path="$(command -v lib-x)"
  if [ -z "$lib_x_path" ]; then
    send_notification "Can't find lib-x in PATH"
    exit 1
  fi

  if [ ! -w "$lib_x_path" ]; then
    if [ -n "$(command -v sudo)" ]; then
      exec sudo -s "$lib_x_path" "-u"
    else
      send_notification "Insufficient permissions to update and can't find sudo in PATH"
      exit 1
    fi
  fi

  update=$(curl -s "https://raw.githubusercontent.com/Benexl/lib-x/refs/heads/master/lib-x" || byebye 1)
  update="$(printf '%s\n' "$update" | diff -u "$lib_x_path" - 2>/dev/null)"
  if [ -z "$update" ]; then
    send_notification "Script is up to date :)"
  else
    if printf '%s\n' "$update" | patch "$lib_x_path" -; then
      send_notification "Script has been updated!"
    else
      send_notification "Can't update for some reason!"
    fi
  fi
  exec "$lib_x_path"
}check_update() {
  update=$(curl -s "https://raw.githubusercontent.com/Benexl/lib-x/refs/heads/master/lib-x")
  update="$(printf '%s\n' "$update" | diff -u "$(command -v lib-x)" - 2>/dev/null)"
  if [ -n "$update" ]; then
    confirm "An update has been found would you like to see the changes before deciding whether to update" && echo "$update" | less
    if [ "$PREFERRED_SELECTOR" = "fzf" ]; then
      answer=$(prompt "$1")
    else
      answer=$(printf "Yes\nNo" | launcher "$1")
    fi
    case "$answer" in
    [Yy]*) update_script ;;
    esac
  fi
}
confirm() {
  if command -v "gum" >/dev/null 2>&1; then
    gum confirm "$1"
  else
    echo "$CLI_HEADER" >/dev/stderr
    printf 'Are you sure you want to proceed [y/N]?: ' >/dev/stderr
    read -r CONFIRMED
    case "$CONFIRMED" in
    y | Y)
      return 0
      ;;
    *)
      return 1
      ;;
    esac
  fi
}

sanitize_title() {
  sed 's/\\\/\\\\\\\/g'
}
launcher() {
  case "${PREFERRED_SELECTOR,,}" in
  *rofi*)
    if [ -z "$ROFI_THEME" ]; then
      rofi -sort -matching fuzzy -dmenu -i -width 1500 -p "" -mesg "Select Action" -matching fuzzy -sorting-method fzf
    else
      rofi -no-config -theme "$ROFI_THEME" -sort -matching fuzzy -dmenu -i -width 1500 -p "" -mesg "Select Action" -matching fuzzy -sorting-method fzf
    fi
    ;;
  *)
    fzf \
      --info=hidden \
      --ansi --layout=reverse \
      --height=100% \
      --prompt="Select Action: " \
      --header-first --header="$CLI_HEADER" \
      --exact --cycle --ansi
    ;;
  esac

}
launcher_with_preview() {
  case "${PREFERRED_SELECTOR,,}" in
  *rofi*)
    if [ -z "$ROFI_THEME" ]; then
      rofi -sort -matching fuzzy -dmenu -i -width 1500 -p "" -mesg "Select Action" -matching fuzzy -sorting-method fzf
    else
      rofi -no-config -theme "$ROFI_THEME" -sort -matching fuzzy -dmenu -i -p "" -mesg "Select Action" -matching fuzzy -sorting-method fzf
    fi
    ;;
  *)
    fzf \
      --info=hidden \
      --layout=reverse \
      --height=100% \
      --prompt="Select Book: " \
      --header-first --header="$CLI_HEADER" \
      --preview-window=left,35%,wrap --bind=right:accept \
      --expect=shift-left,shift-right --tabstop=1 \
      --cycle --exact \
      --ansi --preview="
if ! [ -z {} ] && ! [ {} = \"Exit\" ] && ! [ {} = \"Main Menu\" ];then
  if [ -f \"$CLI_CONFIG_DIR/calibredb.json\" ];then
    CALIBRE_DATA=\"\$(cat \"$CLI_CONFIG_DIR/calibredb.json\")\"
  else
    CALIBRE_DATA=\"\$(calibredb list --for-machine --fields all)\";
  fi
  title=\"\$(echo {} | sed 's/\\\/\\\\\\\/g;')\";
  book=\$(echo \"\$CALIBRE_DATA\" |jq -r \"map(select(.title == \\\"\$title\\\")) | .[0]\")
  book_title=\$(echo  \"\$book\"|jq -r '.title');
  book_authors=\$(echo  \"\$book\"|jq -r '.authors');
  book_tags=\$(echo  \"\$book\"|jq -r '.tags|join(\", \")');
  book_cover=\$(echo  \"\$book\"|jq -r '.cover');
  book_comments=\$(echo  \"\$book\"|jq -r '.comments');
  book_langs=\$(echo  \"\$book\"|jq -r '.languages[]');
  
  init_pretty_print;
  fzf_preview  \"\$book_cover\";

  ll=1
  while [ \$ll -le \$FZF_PREVIEW_COLUMNS ];do echo -n -e \"─\" ;(( ll++ ));done;
  printf \"\${MAGENTA}\${BOLD}Title:\${RESET} \$book_title\n\";
  printf \"\${MAGENTA}\${BOLD}Authors:\${RESET} \$book_authors\n\";
  printf \"\${MAGENTA}\${BOLD}Tags:\${RESET} \$book_tags\n\";
  printf \"\${MAGENTA}\${BOLD}Languages:\${RESET} \$book_langs\n\";

  ll=1
  while [ \$ll -le \$FZF_PREVIEW_COLUMNS ];do echo -n -e \"─\" ;(( ll++ ));done;
  if command -v glow &>/dev/null;then echo -e \$book_comments|glow;
  else echo -e \"\$book_comments\"
  fi
else\
  echo Loading;\
fi;\
      " | tr -d "\n"
    ;;
  esac

}

user_lists_manager() {
  case "$1" in
  "Reading")
    if [ "$2" = "add" ]; then
      if grep "^${title}\$" -s -q <"$READING_LIST_DB"; then
        echo Already in Reading List
        sleep 1
      else
        echo Adding to reading list...
        echo "$title" >>"$READING_LIST_DB"
      fi
    elif [ "$2" = "remove" ]; then
      if grep "^$title\$" -q <"$READING_LIST_DB"; then
        if confirm "Are you sure you want to remove '$title' from  $1 List?"; then
          echo "removing from $1 List..."
          updated_list="$(grep --invert-match "^$title\$" <"$READING_LIST_DB")"
          echo "$updated_list" | grep --extended-regexp '[[:alnum:]]+' >"$READING_LIST_DB"
        fi
      else
        echo "$title is not in your $1 List"
        sleep 1
      fi
    fi
    ;;

  "Paused")
    if [ "$2" = "add" ]; then
      if grep "^${title}\$" -s -q <"$PAUSED_LIST_DB"; then
        echo Already in paused List
        sleep 1
      else
        echo Adding to paused list...
        echo "$title" >>"$PAUSED_LIST_DB"
      fi
    elif [ "$2" = "remove" ]; then
      if grep "^$title\$" -q <"$PAUSED_LIST_DB"; then
        if confirm "Are you sure you want to remove '$title' from  $1 List?"; then
          echo "removing from $1 List..."
          updated_list="$(grep --invert-match "^$title\$" <"$PAUSED_LIST_DB")"
          echo "$updated_list" | grep --extended-regexp '[[:alnum:]]+' >"$PAUSED_LIST_DB"

        fi
      else
        echo "$title is not in your $1 List"
        sleep 1
      fi
    fi
    ;;

  "Re-reading")
    if [ "$2" = "add" ]; then
      if grep "^${title}\$" -s -q <"$RE_READING_LIST_DB"; then
        echo Already in re-reading List
        sleep 1
      else
        echo Adding to re-reading list...
        echo "$title" >>"$RE_READING_LIST_DB"
      fi
    elif [ "$2" = "remove" ]; then
      if grep "^$title\$" -q <"$RE_READING_LIST_DB"; then
        if confirm "Are you sure you want to remove '$title' from  $1 List?"; then
          echo "removing from $1 List..."
          updated_list="$(grep --invert-match "^$title\$" <"$RE_READING_LIST_DB")"
          echo "$updated_list" | grep --extended-regexp '[[:alnum:]]+' >"$RE_READING_LIST_DB"
        fi
      else
        echo "$title is not in your $1 List"
        sleep 1
      fi
    fi
    ;;
  "Completed")
    if [ "$2" = "add" ]; then
      if grep "^${title}\$" -s -q <"$COMPLETED_LIST_DB"; then
        echo Already in completed List
        sleep 1
      else
        echo Adding to completed list...
        echo "$title" >>"$COMPLETED_LIST_DB"
      fi
    elif [ "$2" = "remove" ]; then
      if grep "^$title\$" -q <"$COMPLETED_LIST_DB"; then
        if confirm "Are you sure you want to remove '$title' from  $1 List?"; then
          echo "removing from $1 List..."
          updated_list="$(grep --invert-match "^$title\$" <"$COMPLETED_LIST_DB")"
          echo "$updated_list" | grep --extended-regexp '[[:alnum:]]+' >"$COMPLETED_LIST_DB"
        fi
      else
        echo "$title is not in your $1 List"
        sleep 1
      fi
    fi
    ;;

  "Docs")
    if [ "$2" = "add" ]; then
      if grep "^${title}\$" -s -q <"$DOCS_LIST_DB"; then
        echo Already in docs List
        sleep 1
      else
        echo Adding to docs list...
        echo "$title" >>"$DOCS_LIST_DB"
      fi
    elif [ "$2" = "remove" ]; then
      if grep "^$title\$" -q <"$DOCS_LIST_DB"; then
        if confirm "Are you sure you want to remove '$title' from  $1 List?"; then
          echo "removing from $1 List..."
          updated_list="$(grep --invert-match "^$title\$" <"$DOCS_LIST_DB")"
          echo "$updated_list" | grep --extended-regexp '[[:alnum:]]+' >"$DOCS_LIST_DB"
        fi
      else
        echo "$title is not in your $1 List"
        sleep 1
      fi
    fi
    ;;

  "Planing")
    if [ "$2" = "add" ]; then
      if grep "^${title}\$" -s -q <"$PLANING_LIST_DB"; then
        echo Already in planing List
        sleep 1
      else
        echo Adding to planing list...
        echo "$title" >>"$PLANING_LIST_DB"
      fi
    elif [ "$2" = "remove" ]; then
      if grep "^$title\$" -q <"$PLANING_LIST_DB"; then
        if confirm "Are you sure you want to remove '$title' from  $1 List?"; then
          echo "removing from $1 List..."
          updated_list="$(grep --invert-match "^$title\$" <"$PLANING_LIST_DB")"
          echo "$updated_list" | grep --extended-regexp '[[:alnum:]]+' >"$PLANING_LIST_DB"
        fi
      else
        echo "$title is not in your $1 List"
        sleep 1
      fi
    fi
    ;;
  "Dropped")
    if [ "$2" = "add" ]; then
      if grep "^${title}\$" -s -q <"$DROPPED_LIST_DB"; then
        echo Already in dropped List
        sleep 1
      else
        echo Adding to dropped list...
        echo "$title" >>"$DROPPED_LIST_DB"
      fi
    elif [ "$2" = "remove" ]; then
      if grep "^$title\$" -q <"$DROPPED_LIST_DB"; then
        if confirm "Are you sure you want to remove '$title' from  $1 List?"; then
          echo "removing from $1 List..."
          updated_list="$(grep --invert-match "^$title\$" <"$DROPPED_LIST_DB")"
          echo "$updated_list" | grep --extended-regexp '[[:alnum:]]+' >"$DROPPED_LIST_DB"
        fi
      else
        echo "$title is not in your $1 List"
        sleep 1
      fi
    fi
    ;;
  *)
    echo unknown option
    ;;
  esac
}
byebye() {
  clear
  echo "Have a good day $USERNAME"
  exit 0
}
dump_calibre_data() {

  calibredb list --for-machine --fields all >"$CLI_CONFIG_DIR/calibredb.json"
}
main() {
  dump_calibre_data
  init_pretty_print

  # ---- main menu ----
  if [[ -n "$GO_DIRECTLY_TO" ]]; then
    action="$GO_DIRECTLY_TO"
    unset GO_DIRECTLY_TO
  else
    categories=$(calibredb list_categories --csv | tail -n +2 | cut -d , -f 1 | uniq)
    _categories=$(for category in $categories; do echo "${CYAN}${RESET}  ${category^}"; done)
    action=$(printf "\
${CYAN}${RESET}  Reading-List
${CYAN}${RESET}  Recent
${CYAN}${RESET}  Paused
${CYAN}${RESET}  Re-reading
${CYAN}${RESET}  Planing
${CYAN}${RESET}  Completed
${CYAN}󰈙${RESET}  Docs
${CYAN}${RESET}  Random
${CYAN}${RESET}  All
%s
${CYAN}${RESET}  Dropped
${CYAN}${RESET}  Edit Config
${RED}󰈆${RESET}  Exit" "$_categories" | launcher | sed 's/^.  //g')
  fi
  case "$action" in
  # ---- user lists ----
  "Reading-List")
    titles="$(cat "$READING_LIST_DB")"
    ;;
  "Recent")
    titles="$(tac "$RECENT_DB")"
    ;;
  "Dropped")
    titles="$(cat "$DROPPED_LIST_DB")"
    ;;
  "Paused")
    titles="$(cat "$PAUSED_LIST_DB")"
    ;;
  "Completed")
    titles="$(cat "$COMPLETED_LIST_DB")"
    ;;
  "Re-reading")
    titles="$(cat "$RE_READING_LIST_DB")"
    ;;
  "Planing")
    titles="$(cat "$PLANING_LIST_DB")"
    ;;
  "Docs")
    titles="$(cat "$DOCS_LIST_DB")"
    ;;

  # ---- others ----
  "All")
    titles="$(echo "$CALIBRE_DATA" | jq -r '.[].title')"
    ;;
  "Random")
    titles="$(calibredb list --for-machine --fields=title | jq -r '.[].title' | shuf -n "$NO_OF_RANDOM_BOOKS")"
    ;;

  # ---- calibre search ----
  "Formats")
    series=$(calibredb list_categories --csv | grep "^formats" | cut -d , -f 2 | launcher | tr -d '"')
    if [ -n "$SORT_BY" ]; then
      titles=$(calibredb list --search "format:$series" --sort-by "$SORT_BY" --for-machine --fields=title | jq '.[].title' -r)
    else
      titles=$(calibredb list --search "format:$series" --for-machine --fields=title | jq '.[].title' -r)
    fi
    ;;
  "Series")
    series=$(calibredb list_categories --csv | grep "^series" | cut -d , -f 2 | launcher | tr -d '"')
    if [ -n "$SORT_BY" ]; then
      titles=$(calibredb list --search "series:$series" --sort-by "$SORT_BY" --for-machine --fields=title | jq '.[].title' -r)
    else
      titles=$(calibredb list --search "series:$series" --for-machine --fields=title | jq '.[].title' -r)
    fi
    ;;
  "Languages")
    language=$(calibredb list_categories --csv | grep "^languages" | cut -d , -f 2 | launcher | tr -d '"')
    if [ -n "$SORT_BY" ]; then
      titles=$(calibredb list --search "language:$language" --sort-by "$SORT_BY" --for-machine --fields=title | jq '.[].title' -r)
    else
      titles=$(calibredb list --search "language:$language" --for-machine --fields=title | jq '.[].title' -r)
    fi
    ;;
  "Tags")
    tag=$(calibredb list_categories --csv | grep "^tags" | cut -d , -f 2 | launcher | tr -d '"')
    if [ -n "$SORT_BY" ]; then
      titles=$(calibredb list --search "tag:$tag" --sort-by "$SORT_BY" --for-machine --fields=title | jq '.[].title' -r)
    else
      titles=$(calibredb list --search "tag:$tag" --for-machine --fields=title | jq '.[].title' -r)
    fi
    ;;
  "Rating")
    rating=$(calibredb list_categories --csv | grep "^rating" | cut -d , -f 2 | launcher | tr -d '"')
    if [ -n "$SORT_BY" ]; then
      titles=$(calibredb list --search "rating:$rating" --sort-by "$SORT_BY" --for-machine --fields=title | jq '.[].title' -r)
    else
      titles=$(calibredb list --search "rating:$rating" --for-machine --fields=title | jq '.[].title' -r)
    fi
    ;;
  "Publisher")
    publisher=$(calibredb list_categories --csv | grep "^publisher" | cut -d , -f 2 | launcher | tr -d '"')
    if [ -n "$SORT_BY" ]; then
      titles=$(calibredb list --search "publisher:$publisher" --sort-by "$SORT_BY" --for-machine --fields=title | jq '.[].title' -r)
    else
      titles=$(calibredb list --search "publisher:$publisher" --for-machine --fields=title | jq '.[].title' -r)
    fi
    ;;
  "Identifiers")
    identifier=$(calibredb list_categories --csv | grep "^identifiers" | cut -d , -f 2 | launcher | tr -d '"')
    if [ -n "$SORT_BY" ]; then
      titles=$(calibredb list --search "identifier:$identifier" --sort "$SORT_BY" --for-machine --fields=title | jq '.[].title' -r)
    else
      titles=$(calibredb list --search "identifier:$identifier" --for-machine --fields=title | jq '.[].title' -r)
    fi
    ;;
  "Authors")
    series=$(calibredb list_categories --csv | grep "^authors" | cut -d , -f 2 | launcher | tr -d '"')
    if [ -n "$SORT_BY" ]; then
      titles=$(calibredb list --search "author:$series" --sort "$SORT_BY" --for-machine --fields=title | jq '.[].title' -r)
    else
      titles=$(calibredb list --search "author:$series" --for-machine --fields=title | jq '.[].title' -r)
    fi
    ;;
  # ---- others ----
  "Edit Config")
    $PREFERRED_EDITOR "$CLI_CONFIG_FILE"
    main
    load_config
    ;;
  "Exit")
    byebye
    ;;
  *)
    echo invalid action
    sleep 1
    main
    ;;
  esac
  clear

  # book selection loop
  while true; do
    # ---- select book ----
    SHELL="bash"
    export SHELL
    export -f fzf_preview init_pretty_print sanitize_title
    if [ "$ENABLE_PREVIEW" = "true" ]; then
      title=$(printf "%s\nExit\nMain Menu" "$titles" | launcher_with_preview)
    else
      title=$(printf "%s\nExit\nMain Menu" "$titles" | launcher | tr -d "\n")
    fi
    [ "$title" = "Exit" ] && byebye
    [ "$title" = "Main Menu" ] && break
    [ -z "$title" ] && echo "Nothing has been selected" && sleep 1 && break
    clear

    # ---- book actions ----
    while true; do
      action=$(
        printf "\
${CYAN}${RESET}  Read
${CYAN}󰐒${RESET}  Add To List
${CYAN}󰐐${RESET}  Remove From List
${CYAN}󰌍${RESET}  Back
${CYAN}${RESET}  Main Menu
${RED}󰈆${RESET}  Exit" | launcher | sed 's/^.  //g'
      )
      case "$action" in
      "Read")
        # update recent list
        if [ "$UPDATE_RECENT" = "true" ]; then
          updated_recent_file_contents=$(grep --invert-match -s "^$title\$" <"$RECENT_DB" | grep --extended-regexp "[[:alnum:]]+" | tail -n "$NO_OF_RECENT")
          echo "$updated_recent_file_contents" >"$RECENT_DB"
          echo "$title" >>"$RECENT_DB"
        fi

        # open book
        book=$(cat "$CLI_CONFIG_DIR/calibredb.json" | jq "map(select(.title == \"$title\")) | .[0]")
        book_path="$(echo "$book" | jq -r '.formats[0]')"
        if command -v "open"; then
          open "$book_path" &>/dev/null &
        elif command -v "xdg-open"; then
          xdg-open "$book_path" &>/dev/null &
        else
          echo "No supported reader found" && sleep 1
        fi
        # disown
        [ "${PREFERRED_SELECTOR,,}" = "rofi" ] && wait
        [ "$DISOWN_READING_PROCESS" = "true" ] && [ "${PREFERRED_SELECTOR,,}" = "fzf" ] && disown
        [ "$DISOWN_READING_PROCESS" = "false" ] && [ "${PREFERRED_SELECTOR,,}" = "fzf" ] && wait
        ;;
      "Add To List")
        list_to_add_to=$(printf "Reading\nPaused\nPlaning\nRe-reading\nDocs\nCompleted\nDropped" | launcher)
        user_lists_manager "$list_to_add_to" "add"
        ;;
      "Remove From List")
        list_to_remove_from=$(printf "Reading\nPaused\nPlaning\nRe-reading\nDocs\nCompleted\nDropped" | launcher)
        user_lists_manager "$list_to_remove_from" "remove"
        ;;
      "Back")
        break
        ;;
      "Main Menu")
        MAIN=true
        break
        ;;
      "Exit")
        byebye
        ;;

      *)
        echo invalid action
        sleep 1
        ;;
      esac
      clear
    done
    if [ "$MAIN" = true ]; then
      MAIN=false
      break
    fi
  done
  main
}

# ---- cli ----

trap byebye INT TERM

usage() {
  printf "\
Usage: %s [arguments] [options] 

Commandline options override the config
Some of the options are directly passed to calibredb

Options:
  -s, --search
    search for a book based on calibredb search syntax
  -S, --sort-by 
    sort the books on a specified field
  -g, --go-directly-to
    open $CLI_NAME with a sub-menu pre-selected
  -e, --edit-config
    edit $CLI_NAME config file
  --rofi-theme <path>
    set the path to your rofi config file
  -d,--disown-reading-process
    disown the reading process so you can contine reading even if you close $CLI_NAME
  -D,--no-disown-reading-process
    don't disown the reading process hence when $CLI_NAME closes the app your using to read your book will also close
  -p <selector>,--preferred-selector <selector>
    set the preferred selector for $CLI_NAME to use
  --preview
    enable the preview window
  --no-preview
    disable the preview window
  -r <number>, --no-of-random-books <number>
    the number of random books to show; also makes the cli auto choose Random sub-menu
  -h, --help
    Show this help message and exit
  -v, --version
    print the $CLI_NAME version and exit

arguments:
  completions
    generates shell completions for $CLI_NAME

Examples:
  $CLI_NAME --search tag:chess --sort-by author
  $CLI_NAME --search tag:chess 
  $CLI_NAME --sort-by size 
  $CLI_NAME --go-directly-to Reading-List --sort-by size
  $CLI_NAME --go-directly-to Reading-List 
  $CLI_NAME --no-of-random-books 50 --go-directly-to Random

  $CLI_NAME completions --fish 
" "$CLI_NAME"
  exit "$1"
}

load_config
while [ $# -gt 0 ]; do
  case "$1" in
  -h | --help)
    usage 0
    ;;
  -v | --version)
    echo "$CLI_NAME $CLI_VERSION Copyright © 2024 $CLI_AUTHOR projects"
    exit 0
    ;;
  -e | --edit-config)
    $PREFERRED_EDITOR "$CLI_CONFIG_FILE" || exit 1
    exit 0
    ;;
  -s | --search)
    [ -n "$2" ] || usage 1
    SEARCH="$2"
    GO_DIRECTLY_TO="${GO_DIRECTLY_TO:-All}"
    shift
    ;;
  -g | --go-directly-to)
    [ -n "$2" ] || usage 1
    GO_DIRECTLY_TO="$2"
    shift
    ;;
  -S | --sort-by)
    [ -n "$2" ] || usage 1
    SORT_BY="$2"
    GO_DIRECTLY_TO="${GO_DIRECTLY_TO:-All}"
    shift
    ;;
  -r | --no-of-random-books)
    [ -n "$2" ] || usage 1
    NO_OF_RANDOM_BOOKS="$2"
    GO_DIRECTLY_TO="${GO_DIRECTLY_TO:-Random}"
    shift
    ;;
  -p | --preferred-selector)
    [ -n "$2" ] || usage 1
    PREFERRED_SELECTOR="$2"
    shift
    ;;
  --private)
    UPDATE_RECENT="false"
    ;;
  --preview)
    ENABLE_PREVIEW="true"
    ;;
  --no-preview)
    ENABLE_PREVIEW="false"
    ;;
  -d | --disown-reading-process)
    DISOWN_READING_PROCESS="true"
    ;;
  -D | --no-disown-reading-process)
    DISOWN_READING_PROCESS="false"
    ;;
  --rofi-theme)
    [ -n "$2" ] || usage 1
    ROFI_THEME="$2"
    shift
    ;;
  -E | --generate-desktop-entry)
    echo "
[Desktop Entry]
Name=$CLI_NAME
Type=Application
version=$CLI_VERSION
Path=$HOME
Comment=Read and manage your calibre books from the terminal
Terminal=false
Icon=$CLI_DIR/assets/logo.png
Exec=$0 --preferred-selector rofi
Categories=Education
    "
    exit 0
    ;;
  completions)
    [ -n "$2" ] || usage 1
    case "$2" in
    -f | --fish)
      echo "\
# --- functions ---
function _lib_x_complete_search
  for comp_line in (calibredb list_categories --csv) 
    echo (echo \$comp_line|cut --delimiter , --fields 1):(echo \$comp_line|cut --delimiter , --fields 2|tr -d '\"')
  end
end

# --- completions ---
complete -c $CLI_NAME --no-files --arguments \"completions\" --condition 'not __fish_contains_opt search s sort-by S e edit-config p preferred-selector d disown-reading-process D no-disown-reading-process E generate-desktop-entry rofi-theme'

complete -c $CLI_NAME --no-files --short-option h --long-option help --description 'Print a short help text and exit'
complete -c $CLI_NAME --no-files --short-option v --long-option version --description 'Print a short version string and exit' --condition 'not __fish_seen_subcommand_from completions'

complete -c $CLI_NAME --no-files --short-option e --long-option edit-config --description 'Edit $CLI_NAME config file' --condition 'not __fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option p --long-option preferred-selector --description 'your preferred selector' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments 'fzf rofi'
complete -c $CLI_NAME --no-files --short-option d --long-option disown-reading-process --description 'disown the reading process' --condition 'not __fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option D --long-option no-disown-reading-process --description 'dont disown the reading process' --condition 'not __fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option E --long-option generate-desktop-entry --description 'generate desktop entry info' --condition 'not __fish_seen_subcommand_from completions' 
complete -c $CLI_NAME --no-files --short-option r --long-option no-of-random-books --description 'the number of random books to show' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments \"(seq 100)\" 
complete -c $CLI_NAME --no-files --short-option P --long-option private --description 'dont update recent' --condition 'not __fish_seen_subcommand_from completions'

complete -c $CLI_NAME --no-files --long-option preview --description 'enable preview window' --condition 'not __fish_seen_subcommand_from completions' 
complete -c $CLI_NAME --no-files --long-option no-preview --description 'disable preview window' --condition 'not __fish_seen_subcommand_from completions' 

complete -c $CLI_NAME --force-files --long-option rofi-theme --description 'the path to your rofi config file' --condition 'not __fish_seen_subcommand_from completions' 

complete -c $CLI_NAME --no-files --short-option S --long-option sort-by --description 'Sort the books by a field' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments 'author_sort authors comments cover formats identifiers isbn languages last_modified pubdate publisher rating series series_index size tags template timestamp title uuid'
complete -c $CLI_NAME --no-files --short-option g --long-option go-directly-to --description 'Open $CLI_NAME with a sub-menu pre-selected' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments 'All Reading-List Paused Planing Re-reading Completed Docs Random authors formats identifiers languages  publisher rating series tags Recent'
complete -c $CLI_NAME --no-files --short-option s --long-option search --description 'search for a book' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments \"(_lib_x_complete_search)\"

complete -c $CLI_NAME --no-files --short-option z --long-option zsh --description 'print zsh completions' --condition '__fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option b --long-option bash --description 'print bash completions' --condition '__fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option f --long-option fish --description 'print fish completions' --condition '__fish_seen_subcommand_from completions'
    "
      ;;
    -b | --bash)
      # TODO: write bash completions
      command ...
      ;;
    -z | --zsh)
      # TODO: write zsh completions
      command ...
      ;;
    -h | --help)
      echo "\
Generate shell completions for $CLI_NAME

Options:
  --fish
    print fish completions and exit
  --bash
    print bash completions and exit
  --zsh
    print zsh completions and exit

Example:
  $CLI_NAME completions --fish
  $CLI_NAME completions --bash
  $CLI_NAME completions --zsh
    "
      ;;
    *)
      echo "\
Generate shell completions for $CLI_NAME

Options:
  --fish
    print fish completions and exit
  --bash
    print bash completions and exit
  --zsh
    print zsh completions and exit

Example:
  $CLI_NAME completions --fish
  $CLI_NAME completions --bash
  $CLI_NAME completions --zsh
    "
      exit 1
      ;;

    esac
    exit 0
    ;;
  *)
    usage 1
    ;;
  esac
  shift
done
if [ -n "$SORT_BY" ] && [ -n "$SEARCH" ]; then
  CALIBRE_DATA="$(calibredb list --for-machine --fields title --search "$SEARCH" --sort-by "$SORT_BY")"
elif [ -n "$SORT_BY" ]; then
  CALIBRE_DATA="$(calibredb list --for-machine --fields title --sort-by "$SORT_BY")"
elif [ -n "$SEARCH" ]; then
  CALIBRE_DATA="$(calibredb list --for-machine --fields title --search "$SEARCH")"
fi
CALIBRE_DATA="${CALIBRE_DATA:-$(calibredb list --for-machine --fields title)}"


# setup for ui
timestamp_file="$CLI_CACHE_DIR/last_update_check"

# Time interval in seconds (6 hours = 21600 seconds)
interval=$((6 * 60 * 60))

# Determine whether to run the update check
current_time=$(date +%s)
last_check_time=$(cat "$timestamp_file" 2>/dev/null || echo 0)

if ((current_time - last_check_time >= interval)); then
  # check_update "A new version of $CLI_NAME has been found would you like to upgrade(y/n)"
  echo "$current_time" >"$timestamp_file"
fi
core_dep_ch

main
